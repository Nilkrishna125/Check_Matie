Board Functions:

chess::Board(fen_string) - Create board from FEN notation
board.getFen() - Get current position as FEN string
board.makeMove(move) - Make a move on the board
board.unmakeMove(move) - Undo the last move
board.sideToMove() - Get current player (WHITE or BLACK)
board.isGameOver() - Check if game is over
board.isCheck() - Check if current side is in check
board.isCheckmate() - Check if current side is checkmated
board.isStalemate() - Check if position is stalemate
board.isDraw() - Check if position is a draw
board.at(square) - Get piece at specific square

Move Generation:

chess::movegen::legalmoves(movelist, board) - Generate all legal moves
chess::movegen::legalmoves<chess::movegen::MoveGenType::CAPTURE>(movelist, board) - Only captures
chess::movegen::legalmoves<chess::movegen::MoveGenType::QUIET>(movelist, board) - Only quiet moves

Move Conversion:

chess::uci::moveToUci(move) - Convert move to UCI notation
chess::uci::moveToSan(board, move) - Convert move to SAN notation
chess::uci::uciToMove(board, uci_string) - Convert UCI string to Move

Square and Piece Functions:

chess::Square::fromString("e4") - Create square from string
chess::utils::squareToString(square) - Convert square to string
move.from() - Get source square of move
move.to() - Get destination square of move
move.typeOf() - Get move type (NORMAL, CASTLING, EN_PASSANT, PROMOTION)

Example Usage:
cpp// Check game state
if (board.isCheckmate()) {
    std::cout << "Checkmate!" << std::endl;
}

// Get piece at specific square
auto piece = board.at(chess::Square::fromString("e4"));

// Filter only captures
chess::Movelist captures;
chess::movegen::legalmoves<chess::movegen::MoveGenType::CAPTURE>(captures, board);
The FEN string you provided represents a complex middle-game position, and the code will now show all legal moves from that specific position rather than the starting position.